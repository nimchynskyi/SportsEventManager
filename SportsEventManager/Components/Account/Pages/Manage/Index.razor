@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Humanizer
@using Microsoft.AspNetCore.Identity
@using SportsEventManager.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<h3 class="text-xl font-semibold text-gray-900">Profile</h3>

<StatusMessage/>

<div class="mt-4">
    <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator/>

        <div class="mb-4">
            <label for="username" class="block text-sm font-medium text-gray-700">Your username:</label>
            <input type="text" value="@username" class="block text-sm font-medium text-gray-700" placeholder="Please choose your username." disabled/>
        </div>

        <div class="flex-1 mb-4">
            <div class="block text-sm font-medium text-gray-700">Your roles:</div>
            <div class="flex flex-wrap gap-2 mt-2">
                @foreach (var role in roles)
                {
                    <span class="flex flex-row bg-gray-200 hover:bg-gray-400 shadow-md rounded-md px-2 py-0.5 mr-2">@role</span>
                }
            </div>
        </div>

        <div class="flex-1 mb-4">
            <label for="first-name" class="block text-sm font-medium text-gray-700">First name</label>
            <InputText @bind-Value="Input.FirstName" id="first-name" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Enter your first name"/>
            <ValidationMessage For="() => Input.FirstName" class="text-red-500"/>
        </div>

        <div class="flex-1 mb-4">
            <label for="last-name" class="block text-sm font-medium text-gray-700">Last name</label>
            <InputText @bind-Value="Input.LastName" id="last-name" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Enter your last name"/>
            <ValidationMessage For="() => Input.LastName" class="text-red-500"/>
        </div>

        <div class="flex gap-4">
            <div class="flex-1 mb-4">
                <label for="phone-number" class="block text-sm font-medium text-gray-700">Phone number</label>
                <InputText @bind-Value="Input.PhoneNumber" id="phone-number" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Enter your phone number"/>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-red-500"/>
            </div>

            <div class="flex-1 mb-6">
                <label for="date-of-birth" class="block text-sm font-medium text-gray-700">Date of birth</label>
                <InputDate @bind-Value="Input.DateOfBirth" id="date-of-birth" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"/>
                <ValidationMessage For="() => Input.DateOfBirth" class="text-red-500"/>
            </div>
        </div>

        <button type="submit" class="w-full inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
            Save
        </button>
    </EditForm>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;
    private string? firstName;
    private string? lastName;
    private List<string> roles = new List<string>();
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        GetUserRoles();

        Input.UserName ??= username;
        Input.FirstName ??= user.FirstName ?? "";
        Input.LastName ??= user.LastName ?? "";
        Input.PhoneNumber ??= phoneNumber;
        Input.DateOfBirth ??= user.DateOfBirth ?? new DateOnly(1970, 1, 1);
    }

    private async Task OnValidSubmitAsync()
    {
        user.UserName = Input.UserName;
        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;
        user.PhoneNumber = Input.PhoneNumber;
        user.DateOfBirth = Input.DateOfBirth;
        var updateResult = await UserManager.UpdateAsync(user);
        if (!updateResult.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to update the user.", HttpContext);
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        public string? UserName { get; set; }

        public string? FirstName { get; set; }
        public string? LastName { get; set; }

        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        public DateOnly? DateOfBirth { get; set; }
    }

    private void GetUserRoles()
    {
        roles = new List<string>();
        if (user.IsPlayer) roles.Add("Player");
        if (user.IsCoach) roles.Add("Coach");
        if (user.IsOrganizer) roles.Add("Organizer");
    }

}